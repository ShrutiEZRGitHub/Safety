@page "/walktypegrid"
@inject WalkTypeList walktypelist

<PageTitle>Walk Type List</PageTitle>

<RadzenRow Gap="15px" RowGap="10px">
    <RadzenColumn Size="6">
        <p class="title">Walk Type List</p>
    </RadzenColumn>
    <RadzenColumn Size="6" class="rz-text-align-end rz-py-3">
        <a href="create_wkt">
            <RadzenButton Variant="Variant.Flat" class="create-btn">
                <i class="fa-solid fa-user-plus"></i>Create Walk Type
            </RadzenButton>
        </a>
    </RadzenColumn>
</RadzenRow>

<!-- GRID -->

@if (walktype == null)
{
    <p>Loading........</p>
}
else
{
    <RadzenDataGrid AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        PageSize="10" AllowSorting="true" Data="@walktype" TItem="WalkType" ColumnWidth="150px" class="table-body">

        <Columns>

            <RadzenDataGridColumn TItem="WalkType" Property="Walk_Type" Title="Walk Type">
                <Template Context="data">
                    <a href="update_wkt" class="border-0 text-muted text-decoration-none">@data.Walk_Type</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="WalkType" Property="Status" Title="Status">
                <Template Context="data">
                    <div class="@(data.Status == "Active" ? "dot-active" : "dot-inactive")"></div>
                    @data.Status
                </Template>
            </RadzenDataGridColumn>

        </Columns>

    </RadzenDataGrid>
}
@code {
    List<WalkType> walktype = new();

    protected override async Task OnInitializedAsync()
    {
        walktype = await Task.Run(() => walktypelist.WalkTypeTable());
    }
}